var egret = window.egret,
    __reflect = this && this.__reflect || function(e, t, i) {
        e.__class__ = t, i ? i.push(t) : i = [t], e.__types__ = e.__types__ ? i.concat(e.__types__) : i
    },
    __extends = this && this.__extends || function(e, t) {
        function i() {
            this.constructor = e
        }
        for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
        i.prototype = t.prototype, e.prototype = new i
    },
    __awaiter = this && this.__awaiter || function(e, t, i, n) {
        return new(i || (i = Promise))(function(r, a) {
            function s(e) {
                try {
                    c(n.next(e))
                } catch (t) {
                    a(t)
                }
            }

            function o(e) {
                try {
                    c(n["throw"](e))
                } catch (t) {
                    a(t)
                }
            }

            function c(e) {
                e.done ? r(e.value) : new i(function(t) {
                    t(e.value)
                }).then(s, o)
            }
            c((n = n.apply(e, t || [])).next())
        })
    },
    __generator = this && this.__generator || function(e, t) {
        function i(e) {
            return function(t) {
                return n([e, t])
            }
        }

        function n(i) {
            if (r) throw new TypeError("Generator is already executing.");
            for (; c;) try {
                if (r = 1, a && (s = a[2 & i[0] ? "return" : i[0] ? "throw" : "next"]) && !(s = s.call(a, i[1])).done) return s;
                switch (a = 0, s && (i = [0, s.value]), i[0]) {
                    case 0:
                    case 1:
                        s = i;
                        break;
                    case 4:
                        return c.label++, {
                            value: i[1],
                            done: !1
                        };
                    case 5:
                        c.label++, a = i[1], i = [0];
                        continue;
                    case 7:
                        i = c.ops.pop(), c.trys.pop();
                        continue;
                    default:
                        if (s = c.trys, !(s = s.length > 0 && s[s.length - 1]) && (6 === i[0] || 2 === i[0])) {
                            c = 0;
                            continue
                        }
                        if (3 === i[0] && (!s || i[1] > s[0] && i[1] < s[3])) {
                            c.label = i[1];
                            break
                        }
                        if (6 === i[0] && c.label < s[1]) {
                            c.label = s[1], s = i;
                            break
                        }
                        if (s && c.label < s[2]) {
                            c.label = s[2], c.ops.push(i);
                            break
                        }
                        s[2] && c.ops.pop(), c.trys.pop();
                        continue
                }
                i = t.call(e, c)
            } catch (n) {
                i = [6, n], a = 0
            } finally {
                r = s = 0
            }
            if (5 & i[0]) throw i[1];
            return {
                value: i[0] ? i[1] : void 0,
                done: !0
            }
        }
        var r, a, s, o, c = {
            label: 0,
            sent: function() {
                if (1 & s[0]) throw s[1];
                return s[1]
            },
            trys: [],
            ops: []
        };
        return o = {
            next: i(0),
            "throw": i(1),
            "return": i(2)
        }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
            return this
        }), o
    },
    openctx;
! function(e) {
    var t = function(e) {
        function t(t) {
            var i = e.call(this) || this;
            return i._viewName = t, i
        }
        return __extends(t, e), t.prototype.createChildren = function() {
            e.prototype.createChildren.call(this)
        }, t.prototype.add = function() {}, t.prototype.remove = function() {}, t
    }(eui.Component);
    e.DialogOpenContext = t, __reflect(t.prototype, "openctx.DialogOpenContext");
    var i = function() {
        function t() {
            if (t._instance) throw ""
        }
        return Object.defineProperty(t, "instance", {
            get: function() {
                return t._instance || (t._instance = new t), t._instance
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "shareDisplayObject", {
            get: function() {
                return this._shareDisplayObject
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.initialize = function(e, t) {
            this._stage = e, this._mainContainer = t, this._views = {}, this._black = new egret.Shape, this._shareDisplayObject = this.createDisplayObject(e.stageWidth, e.stageHeight)
        }, t.prototype.registerView = function(e, t) {
            this._views[e] = {
                clazz: t,
                view: null
            }
        }, t.prototype.show = function(t) {
            if (this._views[t] && (this._views[t].view || (this._views[t].view = new this._views[t].clazz), this._views[t].view)) {
                if (!this._views[t].view.group) return void console.error("窗口打开失败,当前窗口缺少为开放域窗体定义的变量group:eui.Group!");
                this._black.graphics.clear(), this._black.graphics.beginFill(0, .7), this._black.graphics.drawRect(0, 0, this._stage.stageWidth, this._stage.stageHeight), this._black.graphics.endFill(), this._mainContainer.addChild(this._black), this._mainContainer.addChild(this._views[t].view), this._curView = this._views[t].view, this._curView.x = this._stage.stageWidth / 2 - this._curView.width / 2, this._curView.y = this._stage.stageHeight / 2 - this._curView.height / 2, this._curView.add();
                var i = this._curView.group.localToGlobal();
                this.postMessage(e.Event.OPEN, {
                    viewName: t,
                    x: i ? i.x : 0,
                    y: i ? i.y : 0
                });
                var n = this._curView.x,
                    r = this._curView.y;
                this._curView.scaleX = this._curView.scaleY = .1, this._curView.x = this._stage.stageWidth / 2 - this._curView.width * this._curView.scaleX / 2, this._curView.y = this._stage.$stageHeight / 2 - this._curView.height * this._curView.scaleY / 2, this._stage.addChild(this._shareDisplayObject), egret.Tween.get(this._curView).to({
                    x: n,
                    y: r,
                    scaleX: 1,
                    scaleY: 1
                }, 300, egret.Ease.backOut)
            }
        }, t.prototype.close = function() {
            this._curView && (egret.Tween.removeTweens(this._curView), this._curView.parent && (this._curView.remove(), this._curView.parent.removeChild(this._curView), this.postMessage(e.Event.CLOSE)), this._black.parent && this._black.parent.removeChild(this._black), this._shareDisplayObject.parent && this._shareDisplayObject.parent.removeChild(this._shareDisplayObject))
        }, t.prototype.createDisplayObject = function(e, t) {
            window.sharedCanvas.width = e, window.sharedCanvas.height = t;
            var i = new egret.BitmapData(window.sharedCanvas);
            i.$deleteSource = !1;
            var n = new egret.Texture;
            n._setBitmapData(i);
            var r = new egret.Bitmap(n);
            if (r.width = e, r.height = t, "webgl" == egret.Capabilities.renderMode) {
                var a = egret.wxgame.WebGLRenderContext.getInstance(),
                    s = a.context;
                s.wxBindCanvasTexture || egret.startTick(function(e) {
                    return egret.WebGLUtils.deleteWebGLTexture(i.webGLTexture), i.webGLTexture = null, !1
                }, this)
            }
            return r
        }, t.prototype.postMessage = function(e, t) {
            t || (t = {}), t.event = e, wx.getOpenDataContext().postMessage(t)
        }, t
    }();
    __reflect(i.prototype, "OpenCtxManager"), e.initialize = i.instance.initialize.bind(i.instance), e.registerView = i.instance.registerView.bind(i.instance), e.show = i.instance.show.bind(i.instance), e.close = i.instance.close.bind(i.instance), e.postMessage = i.instance.postMessage.bind(i.instance)
}(openctx || (openctx = {}));
var AssetAdapter = function() {
    function e() {}
    return e.prototype.getAsset = function(e, t, i) {
        function n(n) {
            t.call(i, n, e)
        }
        if (RES.hasRes(e)) {
            var r = RES.getRes(e);
            r ? n(r) : RES.getResAsync(e, n, this)
        } else RES.getResByUrl(e, n, this, RES.ResourceItem.TYPE_IMAGE)
    }, e
}();
__reflect(AssetAdapter.prototype, "AssetAdapter", ["eui.IAssetAdapter"]);
var LoadingUI = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.createView(), t
    }
    return __extends(t, e), t.prototype.createView = function() {
        this.textField = new egret.TextField, this.addChild(this.textField), this.textField.y = 300, this.textField.width = 480, this.textField.height = 100, this.textField.textAlign = "center"
    }, t.prototype.onProgress = function(e, t) {
        this.textField.text = "Loading..." + e + "/" + t
    }, t
}(egret.Sprite);
__reflect(LoadingUI.prototype, "LoadingUI", ["RES.PromiseTaskReporter"]);
var Main = function(e) {
    function t() {
        return null !== e && e.apply(this, arguments) || this
    }
    return __extends(t, e), t.prototype.createChildren = function() {
        e.prototype.createChildren.call(this), egret.lifecycle.addLifecycleListener(function(e) {}), egret.lifecycle.onPause = function() {
            egret.ticker.pause()
        }, egret.lifecycle.onResume = function() {
            egret.ticker.resume()
        };
        var t = new AssetAdapter;
        egret.registerImplementation("eui.IAssetAdapter", t), egret.registerImplementation("eui.IThemeAdapter", new ThemeAdapter), this.runGame()["catch"](function(e) {
            console.log(e)
        }), this.touchEnabled = !0, this.touchChildren = !0
    }, t.prototype.runGame = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, t;
            return __generator(this, function(i) {
                switch (i.label) {
                    case 0:
                        return [4, this.loadResource()];
                    case 1:
                        return i.sent(), this.createGameScene(), [4, RES.getResAsync("description_json")];
                    case 2:
                        return e = i.sent(), [4, platform.login()];
                    case 3:
                        return i.sent(), [4, platform.getUserInfo()];
                    case 4:
                        return t = i.sent(), console.log(t), [2]
                }
            })
        })
    }, t.prototype.loadResource = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, t;
            return __generator(this, function(i) {
                switch (i.label) {
                    case 0:
                        return i.trys.push([0, 4, , 5]), e = new LoadingUI, this.stage.addChild(e), [4, RES.loadConfig("resource/default.res.json", "resource/")];
                    case 1:
                        return i.sent(), [4, this.loadTheme()];
                    case 2:
                        return i.sent(), [4, RES.loadGroup("preload", 0, e)];
                    case 3:
                        return i.sent(), this.stage.removeChild(e), [3, 5];
                    case 4:
                        return t = i.sent(), console.error(t), [3, 5];
                    case 5:
                        return [2]
                }
            })
        })
    }, t.prototype.loadTheme = function() {
        var e = this;
        return new Promise(function(t, i) {
            var n = new eui.Theme("resource/default.thm.json", e.stage);
            n.addEventListener(eui.UIEvent.COMPLETE, function() {
                t()
            }, e)
        })
    }, t.prototype.createBitmapByName = function(e) {
        var t = new egret.Bitmap,
            i = RES.getRes(e);
        return t.texture = i, t
    }, t.prototype.createGameScene = function() {
        var e = this.createBitmapByName("bg_jpg");
        this.addChild(e);
        var t = this.stage.stageWidth,
            i = this.stage.stageHeight;
        e.width = t, e.height = i;
        var n = new eui.Button;
        n.label = "测试", this.addChild(n), n.x = this.stage.stageWidth / 2 - n.width / 2, n.y = this.stage.stageHeight / 2 - n.height / 2, n.addEventListener(egret.TouchEvent.TOUCH_TAP, function() {
            openctx.show(openctx.UIName.Example)
        }, this), openctx.initialize(this.stage, this), openctx.registerView(openctx.UIName.Example, ExampleDialog)
    }, t
}(eui.UILayer);
__reflect(Main.prototype, "Main");
var ExampleDialog = function(e) {
    function t() {
        var t = e.call(this, openctx.UIName.Example) || this;
        return t.skinName = "skins.DialogSkin", t
    }
    return __extends(t, e), t.prototype.add = function() {
        e.prototype.add.call(this), this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.touchHandler, this)
    }, t.prototype.remove = function() {
        this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.touchHandler, this)
    }, t.prototype.touchHandler = function() {
        openctx.close()
    }, t
}(openctx.DialogOpenContext);
__reflect(ExampleDialog.prototype, "ExampleDialog");
var DebugPlatform = function() {
    function e() {}
    return e.prototype.getUserInfo = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [2, {
                    nickName: "username"
                }]
            })
        })
    }, e.prototype.login = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [2]
            })
        })
    }, e
}();
__reflect(DebugPlatform.prototype, "DebugPlatform", ["Platform"]), window.platform || (window.platform = new DebugPlatform);
var ThemeAdapter = function() {
    function e() {}
    return e.prototype.getTheme = function(e, t, i, n) {
        function r(e) {
            t.call(n, e)
        }

        function a(t) {
            t.resItem.url == e && (RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, a, null), i.call(n))
        }
        var s = this;
        if ("undefined" != typeof generateEUI) egret.callLater(function() {
            t.call(n, generateEUI)
        }, this);
        else if ("undefined" != typeof generateEUI2) RES.getResByUrl("resource/gameEui.json", function(e, i) {
            window.JSONParseClass.setData(e), egret.callLater(function() {
                t.call(n, generateEUI2)
            }, s)
        }, this, RES.ResourceItem.TYPE_JSON);
        else if ("undefined" != typeof generateJSON)
            if (e.indexOf(".exml") > -1) {
                var o = e.split("/");
                o.pop();
                var c = o.join("/") + "_EUI.json";
                generateJSON.paths[e] ? egret.callLater(function() {
                    t.call(n, generateJSON.paths[e])
                }, this) : RES.getResByUrl(c, function(i) {
                    window.JSONParseClass.setData(i), egret.callLater(function() {
                        t.call(n, generateJSON.paths[e])
                    }, s)
                }, this, RES.ResourceItem.TYPE_JSON)
            } else egret.callLater(function() {
                t.call(n, generateJSON)
            }, this);
        else RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, a, null), RES.getResByUrl(e, r, this, RES.ResourceItem.TYPE_TEXT)
    }, e
}();
__reflect(ThemeAdapter.prototype, "ThemeAdapter", ["eui.IThemeAdapter"]);
var openctx;
! function(e) {
    var t = function() {
        function e() {}
        return e.OPEN = "OPEN", e.CLOSE = "CLOSE", e
    }();
    e.Event = t, __reflect(t.prototype, "openctx.Event");
    var i = function() {
        function e() {}
        return e.Example = "Example", e
    }();
    e.UIName = i, __reflect(i.prototype, "openctx.UIName")
}(openctx || (openctx = {})), window.Main = Main;